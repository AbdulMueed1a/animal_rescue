"""
Django settings for DjangoProject3 project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
from credentials import logindetails
import os
from pathlib import Path
import dj_database_url
import cloudinary
import cloudinary.uploader
import cloudinary.api


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent




# env = environ.Env(
#     DEBUG=(bool, False),python manage.py upload_static_images --folder=static/images
# )


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = logindetails.key
# SECRET_KEY = os.environ.get("KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = "True"
# DEBUG = os.environ.get("DEBUG","false").lower()=="true"

ALLOWED_HOSTS = [".ngrok-free.app" , "127.0.0.1" ,"localhost",".vercel.app"]

CSRF_TRUSTED_ORIGINS = [
    'https://c404-203-109-42-158.ngrok-free.app',  # Add your ngrok URL with HTTPS
    'http://localhost:8000',  # Include localhost for non-HTTPS testing
]

SITE_ID = 1


# Application definition

INSTALLED_APPS = [
    'rescueform.apps.RescueformConfig',
    'user.apps.UserConfig',
    'cloudinary',
    'Animalrescue_project.apps.AnimalreascueProjectConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites'
]



cloudinary.config(
    cloud_name=logindetails.CLOUDINARY_CLOUD_NAME,
    api_key=logindetails.CLOUDINARY_API_KEY,
    api_secret=logindetails.CLOUDINARY_API_SECRET,
)
#
# cloudinary.config(
#     cloud_name=os.environ.get('CLOUDINARY_CLOUD_NAME'),
#     api_key=os.environ.get('CLOUDINARY_API_KEY'),
#     api_secret= os.environ.get('CLOUDINARY_API_SECRET'),
# )


# CLOUDINARY_STORAGE = {
#     'CLOUD_NAME': logindetails.CLOUDINARY_CLOUD_NAME,
#     'API_KEY': logindetails.CLOUDINARY_API_KEY,
#     'API_SECRET': logindetails.CLOUDINARY_API_SECRET
# }

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'DjangoProject3.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'DjangoProject3.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
# 	'default': {
# 		'ENGINE': 'django.db.backends.postgresql',
# 		'NAME': 'animalform',
# 		'USER': logindetails.sql_user,
# 		'PASSWORD': logindetails.sql_password,
# 		'HOST': logindetails.sql_host,
# 		'PORT': logindetails.sql_port,
#         'OPTIONS': {
#             'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
#         },
# 	}
# }
# database = DATABASES['default']=dj_database_url.parse(f"postgresql://{os.environ.get('NEON_USER')}:{os.environ.get('NEON_PASS')}@ep-divine-heart-a99g0qly-pooler.gwc.azure.neon.tech/animal_rescue?sslmode=require")
# POSTGRES_DATABASE = dj_database_url.parse(
#     f"postgresql://{os.environ.get('NEON_USER')}:{os.environ.get('NEON_PASS')}@ep-divine-heart-a99g0qly-pooler.gwc.azure.neon.tech/animal_rescue?sslmode=require"
# )
POSTGRES_DATABASE = dj_database_url.parse(
    f"postgresql://{logindetails.neonuser}:{logindetails.neonpassword}@ep-divine-heart-a99g0qly-pooler.gwc.azure.neon.tech/animal_rescue?sslmode=require"
)
DATABASES = {'default': POSTGRES_DATABASE}



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [(BASE_DIR / 'static')]
STATIC_ROOT = BASE_DIR / 'assets'
# if DEBUG:
# else:


MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# django_heroku.settings(locals())